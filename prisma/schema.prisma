// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EmployeeStatus {
  INACTIVE
  ACTIVE
  LEFT
  ON_BREAK
}

enum Role {
  STUDENT
  TEACHER
  MANAGEMENT
  ADMIN
}

enum MailingStatus {
  SENT
  ERROR
}

model User {
  id String @id @default(uuid())
  username String @unique
  email String @unique
  password String
  permission Int @default(1)
  role Role @default(STUDENT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Batch {
  id Int @id @default(autoincrement())
  year String @unique

  contact Contact[] @relation("ContactBatch")
  // contactStudents ContactStudents[]
  // contactTeachers ContactTeachers[] @relation("ContactTeachersBatches")
}

model Faculty {
  id Int @id @default(autoincrement())
  name String

  contact Contact[] @relation("ContactFaculty")
  // contactStudents ContactStudents[]
  // contactTeachers ContactTeachers[] @relation("ContactTeachersFaculties")
  // contactManagement ContactManagement[] @relation("ContactManagementFaculties")
}

model Contact {
  id Int @id @default(autoincrement())
  name String
  email String
  phone String
  type ContactType

  batch Batch[] @relation("ContactBatch")
  faculty Faculty[] @relation("ContactFaculty")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // student ContactStudents?
  // teacher ContactTeachers?
  // management ContactManagement?
}

enum ContactType {
  GENERAL
  STUDENT
  TEACHER
  MANAGEMENT
}

// model ContactStudents {
//   contactId Int @id
//   facultyId Int
//   batchId Int
//   contact Contact @relation(fields: [contactId], references: [id])
//   faculty Faculty @relation(fields: [facultyId], references: [id])
//   batch Batch @relation(fields: [batchId], references: [id])
// }

// model ContactTeachers {
//   contactId Int @id
//   status EmployeeStatus
//   contact Contact @relation(fields: [contactId], references: [id])
//   faculties Faculty[] @relation("ContactTeachersFaculties")
//   batches Batch[] @relation("ContactTeachersBatches")
// }

// model ContactManagement {
//   contactId Int @id
//   status EmployeeStatus
//   contact Contact @relation(fields: [contactId], references: [id])
//   faculties Faculty[] @relation("ContactManagementFaculties")
// }

model Mail {
  id Int @id @default(autoincrement())
  subject String
  body String
  createdAt DateTime @default(now())

  mail MailRecipient[]
}

model MailRecipient {
  id Int @id @default(autoincrement())
  mailId Int
  email String
  type String

  mail Mail @relation(fields: [mailId], references: [id])
}

model Token {
  id Int @id @default(autoincrement())
  token String @unique
  isValid Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}